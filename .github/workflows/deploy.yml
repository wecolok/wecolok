name: Build and Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Checkout du code
      - name: Checkout the code
        uses: actions/checkout@v3

      # Étape 2 : Connexion au registre de conteneurs GitHub
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_TOKEN }}

      # Étape 3 : Build et Push de l'image Web
      - name: Build and push Web image
        run: |
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          docker build -t ghcr.io/$REPO_OWNER/wecolok-web:latest -f ./apps/web/Dockerfile .
          docker push ghcr.io/$REPO_OWNER/wecolok-web:latest

      # Étape 4 : Build et Push de l'image API
      - name: Build and push API image
        run: |
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          docker build -t ghcr.io/$REPO_OWNER/wecolok-api:latest -f ./apps/api/Dockerfile .
          docker push ghcr.io/$REPO_OWNER/wecolok-api:latest

  deploy-to-vps:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      # Étape 1 : Configuration de SSH
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Étape 2 : Ajout de l'IP du VPS dans known_hosts
      - name: Add VPS to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      # Étape 3 : Tirer et exécuter les conteneurs sur le VPS
      - name: Pull and Run Docker Containers on VPS
        env:
          VPS_IP: ${{ secrets.VPS_IP }}
          GITHUB_REPO_OWNER: ${{ github.repository_owner }}
        run: |
          ssh root@${{ env.VPS_IP }} "
            # Connexion au registre GitHub Container Registry
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.PAT_TOKEN }}

            # Tirer les images mises à jour
            docker pull ghcr.io/${{ github.repository_owner }}/wecolok-web:latest
            docker pull ghcr.io/${{ github.repository_owner }}/wecolok-api:latest

            # Arrêter les conteneurs existants (si nécessaire)
            docker stop wecolok-web || true && docker rm wecolok-web || true
            docker stop wecolok-api || true && docker rm wecolok-api || true

            # Lancer les conteneurs
            docker run -d --name wecolok-web -p 80:80 ghcr.io/${{ github.repository_owner }}/wecolok-web:latest
            docker run -d --name wecolok-api -p 8080:8080 ghcr.io/${{ github.repository_owner }}/wecolok-api:latest
          "

  create-release:
    runs-on: ubuntu-latest
    needs: deploy-to-vps

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Set up Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine next version
        id: version
        run: |
          # Extract the latest tag or default to 0.0.0 if no tags exist
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")

          # Extract version components
          major=$(echo "$latest_tag" | cut -d. -f1)
          minor=$(echo "$latest_tag" | cut -d. -f2)
          patch=$(echo "$latest_tag" | cut -d. -f3)

          # Increment the "minor" version and reset "patch"
          minor=$((minor + 1))
          patch=0

          # Construct the new version
          new_version="$major.$minor.$patch"

          # Save the new version to environment
          echo "new_version=$new_version" >> $GITHUB_ENV
          echo "Next version: $new_version"

      - name: Create and push release branch
        run: |
          # Create a new branch and tag
          git checkout -b release/${{ env.new_version }}
          git tag ${{ env.new_version }}

          # Push the branch and the tag
          git push origin release/${{ env.new_version }}
          git push origin ${{ env.new_version }}
